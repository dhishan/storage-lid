name: "CD Pipeline"

pool:
  vmImage: "ubuntu-latest"

parameters:
- name: tfaction
  displayName: Terraform Action
  type: string
  default: plan
  values:
  - destroy
  - apply
  - plan
  
variables:
  - group: tfvars-pe
  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)
  - name: pythonVersion
    value: '3.7'
  - name: environmentName
    value: 'Dev'
  - name: tfversion
    value: 'v1.0.1'

stages:
- stage: Terraform
  displayName: Terraform
  jobs:
  - job: terraformPlan
    displayName: "Terraform Plan"
    steps:
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: $(tfversion)

    - task: TerraformCLI@0
      displayName: Terraform Init
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendType: 'azurerm'
        backendServiceArm: 'SC1'
        backendAzureRmResourceGroupName: 'statefiles-store-rg'
        backendAzureRmStorageAccountName: 'statefilesstore'
        backendAzureRmContainerName: $(STATE_FILE_CONTAINER)
        backendAzureRmKey: $(STATE_FILE)
    
    - task: TerraformCLI@0
      displayName: Terraform Validate
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        
    - task: TerraformCLI@0
      displayName: Terraform Plan
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: SC1

  - deployment: terraformApply
    displayName: "Terraform Apply"
    dependsOn: terraformPlan
    condition: and(succeeded(), ne('${{ parameters.tfaction }}', 'plan'))
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform
            inputs:
              terraformVersion: $(tfversion)

          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              backendType: 'azurerm'
              backendServiceArm: 'SC1'
              backendAzureRmResourceGroupName: 'statefiles-store-rg'
              backendAzureRmStorageAccountName: 'statefilesstore'
              backendAzureRmContainerName: $(STATE_FILE_CONTAINER)
              backendAzureRmKey: $(STATE_FILE)

          - task: TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              command: ${{ parameters.tfaction }}
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
              environmentServiceName: 'SC1'
              # commandOptions: '-var="webapp_name=$(webAppName)" -var="storageaccname=$(storageAccName)" -var="rg_name=$(rgName)"'

# - stage: blobDataUpload
#   displayName: "Data Upload"
#   condition: and(succeeded(), eq('${{ parameters.tfaction }}', 'apply'))
#   jobs:
#   - job: blobDataUpload
#     displayName: Upload sample data
#     steps:
#       - task: AzureCLI@2
#         displayName: "Sample Data Copy"
#         inputs:
#           azureSubscription: 'SC1'
#           scriptType: 'bash'
#           scriptLocation: 'inlineScript'
#           inlineScript: |
#             az storage blob sync -c 'org' --account-name '$(TF_VAR_STR_ACC_NAME)' -s '$(System.DefaultWorkingDirectory)/sampledata/org'
#             az storage blob sync -c 'users' --account-name '$(TF_VAR_STR_ACC_NAME)' -s '$(System.DefaultWorkingDirectory)/sampledata/users'
      
- stage: Build
  displayName: Build App
  condition: and(succeeded(), eq('${{ parameters.tfaction }}', 'apply'))
  jobs:
  - job: BuildJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)/App
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)/App'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: and(succeeded(), eq('${{ parameters.tfaction }}', 'apply'))
  jobs:
  - deployment: DeploymentJob
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(TF_VAR_WEB_APP_NAME)'
            inputs:
              azureSubscription: 'SC1'
              appName: $(TF_VAR_WEB_APP_NAME)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

